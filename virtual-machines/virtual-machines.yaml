---
- name: Create Virtual Machines
  hosts: localhost
  become: true
  vars:
    username: steven
    github_username: sf1tzp # used to import ssh authorized_keys
    vm_specs:
      - hostname: devbox
        os: ubuntu
        vcpus: 8
        memory: 24
        ip: 10.0.0.5
        disk_size: 150G
        gpu_passthrough: false
      - hostname: llm-server
        os: ubuntu
        vcpus: 4
        memory: 8
        ip: 10.0.0.10
        disk_size: 150G
        gpu_passthrough: true

  tasks:
    - name: Check if VMs exist
      virt:
        name: "{{ item.hostname }}"
        command: status
      register: vm_status
      failed_when: false
      with_items: "{{ vm_specs }}"

    - name: Set fact for VMs to create
      set_fact:
        vms_to_create: "{{ vm_specs | selectattr('hostname', 'in', vm_status.results | selectattr('status', 'undefined') | map(attribute='item.hostname') | list) }}"

    - name: Display VMs to be created
      debug:
        msg: "Will create the following VMs: {{ vms_to_create | map(attribute='hostname') | join(', ') }}"
      when: vms_to_create | length > 0

    - name: Create temporary build directory
      tempfile:
        state: directory
        suffix: build

      register: cloudinit_tmp

    - name: Render Cloud Init Templates
      include_tasks: tasks/cloud-init-templates.yaml
      with_items:
        - "{{ vms_to_create }}"
      loop_control:
        label: "{{ item.hostname }}"
        loop_var: item

    - name: Create OS images
      shell: |
        qemu-img create \
          -F qcow2 \
          -b /var/lib/libvirt/images/{{ item.os }}-base.qcow2 \
          -f qcow2 \
          "/var/lib/libvirt/images/{{ item.hostname }}.qcow2" {{ item.disk_size }}
      with_items: "{{ vms_to_create }}"

    - name: Create cloud-init iso images
      shell: |
        cloud-localds "/var/lib/libvirt/images/{{ item.hostname }}_config.iso" \
          -N "{{ cloudinit_tmp.path }}/{{ item.hostname }}-network-config.yaml" \
          "{{ cloudinit_tmp.path }}/{{ item.hostname }}-userdata.yaml" \
          "{{ cloudinit_tmp.path }}/{{ item.hostname }}-metadata.yaml"
      with_items: "{{ vms_to_create }}"

    - name: Create GPU passthrough hook directories
      file:
        path: "/etc/libvirt/hooks/qemu.d/{{ item.0.hostname }}/{{ hook_type }}/{{ hook_moment }}"
        state: directory
        mode: "0755"
      with_nested:
        - "{{ vms_to_create | selectattr('gpu_passthrough', 'equalto', true) | list }}"
        - ["prepare/begin", "release/end"]
      loop_control:
        label: "{{ item.0.hostname }}/{{ item.1 }}"
      vars:
        hook_type: "{{ item.1.split('/')[0] }}"
        hook_moment: "{{ item.1.split('/')[1] }}"
      when: item.0.gpu_passthrough | default(false)

    - name: Create GPU passthrough hook scripts
      template:
        src: "templates/{{ template_name }}.j2"
        dest: "/etc/libvirt/hooks/qemu.d/{{ item.0.hostname }}/{{ item.1 }}/{{ script_name }}"
        mode: "0755"
      with_nested:
        - "{{ vms_to_create | selectattr('gpu_passthrough', 'equalto', true) | list }}"
        - ["prepare/begin", "release/end"]
      loop_control:
        label: "{{ item.0.hostname }}/{{ item.1 }}"
      vars:
        template_name: "{{ 'gpu_start_hook.sh' if item.1 == 'prepare/begin' else 'gpu_stop_hook.sh' }}"
        script_name: "{{ 'start.sh' if item.1 == 'prepare/begin' else 'stop.sh' }}"
      when: item.0.gpu_passthrough | default(false)

    - name: Define Virtual Machines
      virt:
        name: "{{ item.hostname }}"
        command: define
        xml: "{{ lookup('template', 'templates/vm_definition.xml.j2') }}"
      with_items: "{{ vms_to_create }}"
      loop_control:
        loop_var: item
