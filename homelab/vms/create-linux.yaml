---
- name: Create Virtual Machines
  hosts: localhost
  vars:
    vault_password: "{{ lookup('env', 'ANSIBLE_VAULT_PASSWORD') }}"
    vm_passwords_file: "~/.homelab-passwords.yaml"
    github_username: sf1tzp # used to import ssh authorized_keys
    libvirt_images: /var/lib/libvirt/images

    # Default VM configuration for VMs not explicitly defined
    default_vm_spec:
      os: ubuntu-server-24.04
      vcpus: 2
      memory: 4
      disk_size: 50G
      gpu_passthrough: false

  tasks:
    - name: Parse target VMs from command line
      set_fact:
        target_vm_list: "{{ target_vms.split() if target_vms is defined else [] }}"

    - name: Build VM specs from inventory
      set_fact:
        vm_specs: >-
          {{
            vm_specs | default([]) + [{
              'hostname': item,
              'ip': hostvars[item]['ansible_host'],
              'os': hostvars[item]['os'] | default(default_vm_spec.os),
              'vcpus': hostvars[item]['vcpus'] | default(default_vm_spec.vcpus),
              'memory': hostvars[item]['memory'] | default(default_vm_spec.memory),
              'disk_size': hostvars[item]['disk_size'] | default(default_vm_spec.disk_size),
              'gpu_passthrough': hostvars[item]['gpu_passthrough'] | default(default_vm_spec.gpu_passthrough),
              'gpu_domain': hostvars[item]['gpu_domain'] | default(''),
              'gpu_bus': hostvars[item]['gpu_bus'] | default(''),
              'gpu_slot': hostvars[item]['gpu_slot'] | default(''),
              'username': hostvars[item]['username'] | default('ubuntu')
            }]
          }}
      loop: "{{ groups['vms'] }}"
      loop_control:
        label: "Building spec for {{ item }}"
      when: target_vm_list | length == 0 or item in target_vm_list

    - name: Display final VM specifications
      debug:
        msg: "VM {{ item.hostname }}: {{ item.vcpus }}vCPU, {{ item.memory }}GB RAM, {{ item.disk_size }} disk, OS: {{item.os}}, IP: {{ item.ip }}"
      loop: "{{ vm_specs }}"
      loop_control:
        label: "{{ item.hostname }}"

    - name: Checking if VMs exist
      virt:
        name: "{{ item.hostname }}"
        command: status
      register: vm_status
      failed_when: false
      with_items: "{{ vm_specs }}"
      loop_control:
        label: "Checking if {{ item.hostname }} is already defined"

    - set_fact:
        vms_to_create: "{{ vm_specs | selectattr('hostname', 'in', vm_status.results | selectattr('status', 'undefined') | map(attribute='item.hostname') | list) }}"

    - meta: end_play
      when: vms_to_create | length == 0

    - debug:
        msg: "Will create the following VMs: {{ vms_to_create | map(attribute='hostname') | join(', ') }}"

    - name: Generate user passwords
      include_tasks: tasks/passwords.yaml
      with_items: "{{ vms_to_create }}"
      loop_control:
        label: "Generated {{ item.hostname }} user password"

    - name: Create cloud-init image
      include_tasks: tasks/cloud-init.yaml
      with_items: "{{ vms_to_create }}"
      loop_control:
        label: "Generated {{ item.hostname }} cloud-init image"

    - name: Create OS disk images
      become: false
      shell: |
        qemu-img create \
          -F qcow2 \
          -b {{ libvirt_images }}/bases/{{ item.os }}.qcow2 \
          -f qcow2 \
          "{{ libvirt_images }}/{{ item.hostname }}.qcow2" {{ item.disk_size }}
      with_items: "{{ vms_to_create }}"
      loop_control:
        label: "Created {{ item.hostname }} OS Disk Image"

    - name: Create GPU passthrough hook directories
      become: false
      file:
        path: "/etc/libvirt/hooks/qemu.d/{{ item.0.hostname }}/{{ item.1 }}"
        state: directory
        mode: "755"
      with_nested:
        - "{{ vms_to_create }}"
        - ["prepare/begin", "release/end"]
      loop_control:
        label: "Created {{ item.0.hostname }} {{ item.1 }} hook directory"
      when: item.0.gpu_passthrough | default(false)

    - name: Render GPU passthrough hook scripts
      become: false
      template:
        src: "templates/{{ template_name }}.j2"
        dest: "/etc/libvirt/hooks/qemu.d/{{ item.0.hostname }}/{{ item.1 }}/{{ template_name }}"
        mode: "755"
      with_nested:
        - "{{ vms_to_create }}"
        - ["prepare/begin", "release/end"]
      loop_control:
        label: "Wrote {{ item.0.hostname }} hook {{ item.1 }}/{{ template_name }}"
      vars:
        template_name: "{{ 'gpu-start-hook.sh' if item.1 == 'prepare/begin' else 'gpu-stop-hook.sh' }}"
      when: item.0.gpu_passthrough | default(false)

    - name: Define virtual machines
      become: false
      virt:
        name: "{{ item.hostname }}"
        command: define
        xml: "{{ lookup('template', 'templates/linux-definition.xml.j2') }}"
      with_items: "{{ vms_to_create }}"
      loop_control:
        label: "Defined {{ item.hostname }} libvirt domain"

    - name: Start virtual machines
      become: false
      virt:
        name: "{{ item.hostname }}"
        state: running
      with_items: "{{ vms_to_create }}"
      loop_control:
        label: "Started {{ item.hostname }}"
