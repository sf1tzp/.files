#!/bin/bash

install_base() {
	sudo apt-get update
	sudo apt-get install -y \
		apt-transport-https \
		software-properties-common \
		ca-certificates \
		curl \
		make \
		wget \
		unzip \
		gnupg-agent \
		build-essential \
		libevent-dev \
		ncurses-dev \
		libssl-dev \
		pkg-config
}

install_stuff() {
	mkdir -p ~/.config

	install_base

	# Shell Utilties
	parallelize '
        install_fzf
    '
	# Programming Languages
	parallelize '
        install_az
        install_go
        install_rust
        install_nodejs
    '
	# Shell Experience
	parallelize '
        install_tmux
        install_glow
        install_pipes
        install_neovim
        install_shellcheck
    '
	# Kubernetes Tools
	parallelize '
        install_k9s
        install_kind
        install_helm
        install_kubectl
        install_kubectx
        install_clusterctl
        install_kubebuilder
    '
}

parallelize() {
	tasks=$1
	pid_array=() # Track backgrounded pids
	for task in $tasks; do
		printf "running %s " "$task"
		eval "$task" &
		pid_array+=($!)
	done
	# Wait for pid completion
	for pid in "${pid_array[@]}"; do
		wait "${pid}" &>/dev/null
	done
}

#------------------------------------------------------------------------------#

install_az() {
	if ! command -v az &>/dev/null; then
		curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
	fi
}

install_brew() {
	if ! command -v brew &>/dev/null; then
		CI=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	fi
}

install_clusterctl() {
	: "${CLUSTERCTL_VERSION:="1.3.3"}"
	if ! command -v clusterctl &>/dev/null; then
		pushd $(mktemp -d)
		wget -c https://github.com/kubernetes-sigs/cluster-api/releases/download/v${CLUSTERCTL_VERSION}/clusterctl-linux-amd64
		chmod +x clusterctl-linux-amd64
		sudo mv clusterctl-linux-amd64 /usr/local/bin/clusterctl
		popd
	fi
}

install_docker() {
	if ! command -v docker &>/dev/null; then
		curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
		sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
		sudo apt-get install -y docker-ce bridge-utils docker-ce-cli containerd.io
	fi
	sudo usermod -aG docker "$USER"
	echo "'$USER' was added to the docker group. Please log out and back in for change to take effect"
}

install_fzf() {
	if ! command -v fzf &>/dev/null; then
		git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
		~/.fzf/install --all
	fi
}

install_glow() {
	: "${GLOW_VERSION="1.5.0"}"
	if ! command -v glow &>/dev/null; then
		pushd $(mktemp -d)
		wget -qc "https://github.com/charmbracelet/glow/releases/download/v${GLOW_VERSION}/glow_${GLOW_VERSION}_Linux_x86_64.tar.gz"
		tar -xzvf glow_${GLOW_VERSION}_Linux_x86_64.tar.gz
		sudo mv glow /usr/local/bin/
		popd
	fi
}

install_go() {
	: "${GO_VERSION:="1.19.4"}"
	: "${FORCE_GO_INSTALL:=false}"
	if ! command -v go &>/dev/null || $FORCE_GO_INSTALL; then
		sudo rm -rf /usr/local/go
		wget -qc https://golang.org/dl/go$GO_VERSION.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local
	fi
}

install_helm() {
	: "${HELM_VERSION:="3.13.2"}"
	curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
	chmod 700 get_helm.sh
	if [ "$HELM_VERSION" == "" ]; then
		./get_helm.sh
	else
		./get_helm.sh --version v$HELM_VERSION
	fi
	rm get_helm.sh
}

install_k9s() {
	: "${K9S_VERSION:="0.27.3"}"
	if ! command -v k9s &>/dev/null; then
		pushd $(mktemp -d)
		mkdir -p ~/.config/k9s/
		wget -qc https://github.com/derailed/k9s/releases/download/v${K9S_VERSION}/k9s_Linux_amd64.tar.gz -O - | sudo tar -xz -C /usr/local/bin
		wget -qO ~/.config/k9s/skin.yml https://raw.githubusercontent.com/derailed/k9s/v${K9S_VERSION}/skins/gruvbox-dark.yml
		if [ -f ~/.config/k9s/config.yml ]; then
			yq -i '.k9s.headless = true' ~/.config/k9s/config.yml
			yq -i '.k9s.noExitOnCtrlC = true' ~/.config/k9s/config.yml
		fi
		popd
	fi
}

install_kind() {
	: "${KIND_VERSION:="0.17.0"}"
	if ! command -v kind &>/dev/null; then
		wget -qcO ./kind https://kind.sigs.k8s.io/dl/v${KIND_VERSION}/kind-linux-amd64
		chmod +x ./kind
		sudo mv ./kind /usr/local/bin/kind
	fi
}

install_kubebuilder() {
	: "${KUBEBUILDER_VERSION:=$(go env GOOS)}"
	if ! command -v kubebuilder &>/dev/null; then
		wget -qcO kubebuilder https://go.kubebuilder.io/dl/latest/${KUBEBUILDER_VERSION}/$(go env GOARCH)
		chmod +x kubebuilder && sudo mv kubebuilder /usr/local/bin/
	fi
}

install_kubectl() {
	: "${KUBERNETES_VERSION:=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)}"
	if ! command -v kubectl &>/dev/null; then
		sudo curl -L "https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubectl" -o /usr/local/bin/kubectl
		sudo chmod +x /usr/local/bin/kubectl
		kubectl version --short --client
	fi
}

install_kubectx() {
	: "${KUBECTX_VERSION:="v0.9.4"}"
	if ! command -v kubectx &>/dev/null; then
		wget -qc https://github.com/ahmetb/kubectx/releases/download/${KUBECTX_VERSION}/kubectx_${KUBECTX_VERSION}_linux_x86_64.tar.gz -O - | sudo tar -xz -C /usr/local/bin
	fi

	if ! command -v kubens &>/dev/null; then
		wget -qc https://github.com/ahmetb/kubectx/releases/download/${KUBECTX_VERSION}/kubens_${KUBECTX_VERSION}_linux_x86_64.tar.gz -O - | sudo tar -xz -C /usr/local/bin
	fi
}

install_kustomize() {
	if ! command -v kustomize &>/dev/null; then
		curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
		sudo mv ./kustomize /usr/local/bin/kustomize
	fi
}

install_neovim() {
	: "${NEOVIM_VERSION:="0.10.4"}"
	if ! command -v nvim &>/dev/null; then
		pushd $(mktemp -d)
		wget -qc https://github.com/neovim/neovim/releases/download/v${NEOVIM_VERSION}/nvim-linux-x86_64.tar.gz
		tar -xzvf nvim-linux-x86_64.tar.gz nvim-linux-x86_64
		sudo mv nvim-linux-x86_64 /usr/local/nvim
		popd
		if [ ! -f ~/.config/nvim ]; then
			ln -s ~/.files/nvim ~/.config/nvim
		fi
	fi
}

install_nodejs() {
	: "${NODE_JS_VERSION="18.15.0"}"
	if ! command -v node &>/dev/null; then
		pushd $(mktemp -d)
		wget -qc "https://nodejs.org/dist/v${NODE_JS_VERSION}/node-v${NODE_JS_VERSION}-linux-x64.tar.xz"
		tar -xvf node-v${NODE_JS_VERSION}-linux-x64.tar.xz
		sudo mv node-v${NODE_JS_VERSION}-linux-x64 /usr/local/nodejs
		popd
	fi
}

install_pipes() {
	if ! command -v pipes.sh &>/dev/null; then
		pushd $(mktemp -d)
		git clone https://github.com/pipeseroni/pipes.sh.git
		pushd pipes.sh
		sudo make install
		popd
		popd
	fi
}

install_pyenv() {
	if ! command -v pyenv &>/dev/null; then
		curl -s -S -L https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash
	fi
}

install_python() {
	install_brew
	install_pyenv

	export PYENV_ROOT=~/.pyenv
	export PATH="$PYENV_ROOT/bin:$PATH"
	eval "$(pyenv init --path)"
	eval "$(pyenv init -)"
	eval "$(pyenv virtualenv-init -)"
	: "${PYTHON_VERSION:="3.10.2"}"
	pyenv install $PYTHON_VERSION
	pyenv global $PYTHON_VERSION
}

install_rust() {
	: "${COOL_CARGO:=false}"
	if ! command -v rustup &>/dev/null; then
		curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y -q
		source ~/.cargo/env
	fi
	if $COOL_CARGO; then
		cargo install code-minimap tmux-sessionizer
		tms config --paths "$HOME"
	fi
}

install_shellcheck() {
	: "${SHELLCHECK_VERSION:="0.10.0"}"
	if ! command -v shellcheck &>/dev/null; then
		pushd $(mktemp -d)
		wget -qc "https://github.com/koalaman/shellcheck/releases/download/v${SHELLCHECK_VERSION}/shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz"
		tar -xvf shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz
		sudo mv shellcheck-v${SHELLCHECK_VERSION}/shellcheck /usr/local/bin/
		popd
	fi
}

install_tmux() {
	: "${TMUX_VERSION:="3.5a"}"
	if [ ! "$(command -v tmux | grep '/usr/local/bin')" ]; then
		pushd $(mktemp -d)
		wget -qc "https://github.com/tmux/tmux/releases/download/${TMUX_VERSION}/tmux-${TMUX_VERSION}.tar.gz"
		tar -xzvf tmux-${TMUX_VERSION}.tar.gz
		pushd tmux-${TMUX_VERSION}
		./configure && make
		sudo make install
		popd
		popd
	fi

	install_tmux_plugin_manager

	if [ ! -f ~/.tmux.conf ]; then
		ln -s ~/.files/tmux.conf ~/.tmux.conf
	fi
}

install_tmux_plugin_manager() {
	if [ ! -d ~/.tmux/plugins/tpm ]; then
		git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
	fi

}

install_vivid() {
	: "${VIVID_VERSION:="0.8.0"}"
	if ! command -v vivid; then
		pushd $(mktemp -d)
		wget -qc https://github.com/sharkdp/vivid/releases/download/v${VIVID_VERSION}/vivid-v${VIVID_VERSION}-x86_64-unknown-linux-musl.tar.gz
		tar -xzvf vivid-v${VIVID_VERSION}-x86_64-unknown-linux-musl.tar.gz
		sudo mv vivid-v${VIVID_VERSION}-x86_64-unknown-linux-musl/vivid /usr/local/bin/
		popd
	fi
}
